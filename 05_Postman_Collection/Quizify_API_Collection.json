{
	"info": {
		"_postman_id": "954ad915-9799-44eb-9cf1-eb79fc0ac14c",
		"name": "Quizify API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42496775",
		"_collection_link": "https://standalone-2174.postman.co/workspace/Quizify-API-Testing-Project~60637187-43fe-4a7d-afbd-b9ab50e1408c/collection/42496775-954ad915-9799-44eb-9cf1-eb79fc0ac14c?action=share&source=collection_link&creator=42496775"
	},
	"item": [
		{
			"name": "Auth Module",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData;\r",
									"\r",
									"pm.test(\"Response has token\", function () {\r",
									"  jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.set(\"auth_token\", jsonData.token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test User1\",\r\n  \"email\": \"testuser1@gmail.com\",\r\n  \"password\": \"Test@1234\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"let jsonData;\r",
									"pm.test(\"Role preseent\",function(){\r",
									"    jsonData=pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"role\");\r",
									"})\r",
									"pm.test(\"role should be user\",function(){\r",
									"    pm.expect(jsonData.role).to.equal(\"user\");\r",
									"})\r",
									"pm.environment.set(\"auth_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"testuser1@gmail.com\",\r\n  \"password\": \"Test@1234\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "ResetPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {\r",
									"//   pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Check message\",()=>{\r",
									"//     pm.expect(pm.response.json().message).to.equal(\"Password reset successful\")\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n// {\r\n//   \"email\": \"testuser1@gmail.com\",\r\n//   \"password\": \"Test@1234\"\r\n// }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Module",
			"item": [
				{
					"name": "GetProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\",()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"pm.test(\"User name exists\",()=>{\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.has.property(\"name\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Updated name returned\", () => {\r",
									"  const data = pm.response.json();\r",
									"  pm.expect(data.name).to.eql(\"Test User Updated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test User Updated\",\r\n  \"photoURL\": \"https://i.imgur.com/example.png\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{auth_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Quiz Module",
			"item": [
				{
					"name": "GetAllQuizzes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response is array\", () =>{\r",
									"    let jsonData=pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/quizzes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quizzes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetQuesionsbyCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"\r",
									"pm.test(\"Response is array\", () =>{\r",
									"    let jsonData=pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/quizzes/tech?difficulty=easy",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quizzes",
								"tech"
							],
							"query": [
								{
									"key": "difficulty",
									"value": "easy"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{auth_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Result Module",
			"item": [
				{
					"name": "SubmitQuizResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201 â€“ Result Created\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"Contains score field\", () => pm.expect(pm.response.json()).to.have.property(\"score\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"tech\",\r\n  \"score\": 5,\r\n  \"total\": 5,\r\n  \"difficulty\": \"easy\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/results",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"results"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLeaderboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Leaderboard is array\", () => pm.expect(pm.response.json()).to.be.an(\"array\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/results/leaderboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"results",
								"leaderboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"History entries belong to current user\", () => {\r",
									"  const res = pm.response.json();\r",
									"  if (res.length > 0) pm.expect(res[0]).to.have.property(\"category\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/results/history",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"results",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "SubmitQuizResult(using chaining)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const data = pm.response.json();\r",
									"pm.environment.set(\"result_category\", data.category);\r",
									"pm.test(\"Result Submitted Successfully\", () => pm.response.to.have.status(201));\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"tech\",\r\n  \"score\": 5,\r\n  \"total\": 5,\r\n  \"difficulty\": \"easy\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/results",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"results"
							]
						}
					},
					"response": []
				},
				{
					"name": "FetchLeaderboardVerify(chaining)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const category = pm.environment.get(\"result_category\");\r",
									"const leaderboard = pm.response.json();\r",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Leaderboard contains submitted category\", () => {\r",
									"    const found = leaderboard.some(item => item.category === category);\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/results/leaderboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"results",
								"leaderboard"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{auth_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin Module",
			"item": [
				{
					"name": "GetAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"First object contains email\", () => {\r",
									"  const data = pm.response.json();\r",
									"  pm.expect(data[0]).to.have.property(\"email\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllQuestions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddQuestions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201\", () => pm.response.to.have.status(201));\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"tech\",\r\n  \"difficulty\": \"easy\",\r\n  \"question\": \"React is a __ library.\",\r\n  \"options\": [\"Frontend\", \"Backend\", \"Database\", \"Server\"],\r\n  \"answer\": \"Frontend\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAdminStats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Stats contain userCount\", () => pm.expect(pm.response.json()).to.have.property(\"userCount\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "AdminLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"let jsonData;\r",
									"pm.test(\"Response has token\",()=>{\r",
									"    jsonData=pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"\r",
									"    pm.collectionVariables.set(\"Admintoken\",jsonData.token);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"mohammadfurqan@gmail.com\",\r\n    \"password\":\"furqan@furqan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddQuestion(using chaining)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"pm.environment.set(\"created_question_id\", res._id);\r",
									"pm.test(\"Question Created\", () => pm.response.to.have.status(201));\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"tech\",\r\n  \"difficulty\": \"medium\",\r\n  \"question\": \"Which language is used for styling web pages?\",\r\n  \"options\": [\"HTML\", \"JQuery\", \"CSS\", \"XML\"],\r\n  \"answer\": \"CSS\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteQuestion(using chaining)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Chained Deletion Successful\", () => pm.response.to.have.status(200));\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/questions/{{created_question_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"questions",
								"{{created_question_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admintoken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "Admintoken",
			"value": ""
		}
	]
}